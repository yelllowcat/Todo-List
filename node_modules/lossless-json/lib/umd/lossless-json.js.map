{"version":3,"file":"lossless-json.js","sources":["../esm/config.js","../esm/utils.js","../esm/LosslessNumber.js","../esm/numberParsers.js","../esm/revive.js","../esm/parse.js","../esm/reviveDate.js","../esm/stringify.js"],"sourcesContent":["/**\n * Get and/or set configuration options\n * @deprecated There is no config anymore\n */\nexport function config(_options) {\n  // Backward compatibility warning for v1.x\n  throw new Error('config is deprecated, support for circularRefs is removed from the library. ' + 'If you encounter circular references in your data structures, ' + 'please rethink your datastructures: ' + 'better prevent circular references in the first place.');\n}\n//# sourceMappingURL=config.js.map","/**\n * Test whether a string contains an integer number\n */\nexport function isInteger(value) {\n  return INTEGER_REGEX.test(value);\n}\nconst INTEGER_REGEX = /^-?[0-9]+$/;\n\n/**\n * Test whether a string contains a number\n * http://stackoverflow.com/questions/13340717/json-numbers-regular-expression\n */\nexport function isNumber(value) {\n  return NUMBER_REGEX.test(value);\n}\nconst NUMBER_REGEX = /^-?(?:0|[1-9]\\d*)(?:\\.\\d+)?(?:[eE][+-]?\\d+)?$/;\n\n/**\n * Test whether a string can be safely represented with a number\n * without information loss.\n *\n * When approx is true, floating point numbers that lose a few digits but\n * are still approximately equal in value are considered safe too.\n * Integer numbers must still be exactly equal.\n */\nexport function isSafeNumber(value, config) {\n  const num = Number.parseFloat(value);\n  const parsed = String(num);\n  if (value === parsed) {\n    return true;\n  }\n  const valueDigits = extractSignificantDigits(value);\n  const parsedDigits = extractSignificantDigits(parsed);\n  if (valueDigits === parsedDigits) {\n    return true;\n  }\n  if (config?.approx === true) {\n    // A value is approximately equal when:\n    // 1. it is a floating point number, not an integer\n    // 2. it has at least 14 digits\n    // 3. the first 14 digits are equal\n    const requiredDigits = 14;\n    if (!isInteger(value) && parsedDigits.length >= requiredDigits && valueDigits.startsWith(parsedDigits.substring(0, requiredDigits))) {\n      return true;\n    }\n  }\n  return false;\n}\nexport let UnsafeNumberReason = /*#__PURE__*/function (UnsafeNumberReason) {\n  UnsafeNumberReason[\"underflow\"] = \"underflow\";\n  UnsafeNumberReason[\"overflow\"] = \"overflow\";\n  UnsafeNumberReason[\"truncate_integer\"] = \"truncate_integer\";\n  UnsafeNumberReason[\"truncate_float\"] = \"truncate_float\";\n  return UnsafeNumberReason;\n}({});\n\n/**\n * When the provided value is an unsafe number, describe what the reason is:\n * overflow, underflow, truncate_integer, or truncate_float.\n * Returns undefined when the value is safe.\n */\nexport function getUnsafeNumberReason(value) {\n  if (isSafeNumber(value, {\n    approx: false\n  })) {\n    return undefined;\n  }\n  if (isInteger(value)) {\n    return UnsafeNumberReason.truncate_integer;\n  }\n  const num = Number.parseFloat(value);\n  if (!Number.isFinite(num)) {\n    return UnsafeNumberReason.overflow;\n  }\n  if (num === 0) {\n    return UnsafeNumberReason.underflow;\n  }\n  return UnsafeNumberReason.truncate_float;\n}\n\n/**\n * Convert a string into a number when it is safe to do so.\n * Throws an error otherwise, explaining the reason.\n */\nexport function toSafeNumberOrThrow(value, config) {\n  const number = Number.parseFloat(value);\n  const unsafeReason = getUnsafeNumberReason(value);\n  if (config?.approx === true ? unsafeReason && unsafeReason !== UnsafeNumberReason.truncate_float : unsafeReason) {\n    const unsafeReasonText = unsafeReason?.replace(/_\\w+$/, '');\n    throw new Error(`Cannot safely convert to number: the value '${value}' would ${unsafeReasonText} and become ${number}`);\n  }\n  return number;\n}\n\n/**\n * Split a number into sign, digits, and exponent.\n * The value can be constructed again from a split number by inserting a dot\n * at the second character of the digits if there is more than one digit,\n * prepending it with the sign, and appending the exponent like `e${exponent}`\n */\nexport function splitNumber(value) {\n  const match = value.match(/^(-?)(\\d+\\.?\\d*)([eE]([+-]?\\d+))?$/);\n  if (!match) {\n    throw new SyntaxError(`Invalid number: ${value}`);\n  }\n  const sign = match[1];\n  const digitsStr = match[2];\n  let exponent = match[4] !== undefined ? Number.parseInt(match[4]) : 0;\n  const dot = digitsStr.indexOf('.');\n  exponent += dot !== -1 ? dot - 1 : digitsStr.length - 1;\n  const digits = digitsStr.replace('.', '') // remove the dot (must be removed before removing leading zeros)\n  .replace(/^0*/, zeros => {\n    // remove leading zeros, add their count to the exponent\n    exponent -= zeros.length;\n    return '';\n  }).replace(/0*$/, ''); // remove trailing zeros\n\n  return digits.length > 0 ? {\n    sign,\n    digits,\n    exponent\n  } : {\n    sign,\n    digits: '0',\n    exponent: exponent + 1\n  };\n}\n\n/**\n * Compare two strings containing a numeric value\n * Returns 1 when a is larger than b, 0 when they are equal,\n * and -1 when a is smaller than b.\n */\nexport function compareNumber(a, b) {\n  if (a === b) {\n    return 0;\n  }\n  const aa = splitNumber(a);\n  const bb = splitNumber(b);\n  const sign = aa.sign === '-' ? -1 : 1;\n  if (aa.sign !== bb.sign) {\n    if (aa.digits === '0' && bb.digits === '0') {\n      return 0;\n    }\n    return sign;\n  }\n  if (aa.exponent !== bb.exponent) {\n    return aa.exponent > bb.exponent ? sign : aa.exponent < bb.exponent ? -sign : 0;\n  }\n  return aa.digits > bb.digits ? sign : aa.digits < bb.digits ? -sign : 0;\n}\n\n/**\n * Count the significant digits of a number.\n *\n * For example:\n *   '2.34' returns 3\n *   '-77' returns 2\n *   '0.003400' returns 2\n *   '120.5e+30' returns 4\n **/\nexport function countSignificantDigits(value) {\n  const {\n    start,\n    end\n  } = getSignificantDigitRange(value);\n  const dot = value.indexOf('.');\n  if (dot === -1 || dot < start || dot > end) {\n    return end - start;\n  }\n  return end - start - 1;\n}\n\n/**\n * Get the significant digits of a number.\n *\n * For example:\n *   '2.34' returns '234'\n *   '-77' returns '77'\n *   '0.003400' returns '34'\n *   '120.5e+30' returns '1205'\n **/\nexport function extractSignificantDigits(value) {\n  const {\n    start,\n    end\n  } = getSignificantDigitRange(value);\n  const digits = value.substring(start, end);\n  const dot = digits.indexOf('.');\n  if (dot === -1) {\n    return digits;\n  }\n  return digits.substring(0, dot) + digits.substring(dot + 1);\n}\n\n/**\n * Returns the range (start to end) of the significant digits of a value.\n * Note that this range _may_ contain the decimal dot.\n *\n * For example:\n *\n *     getSignificantDigitRange('0.0325900') // { start: 3, end: 7 }\n *     getSignificantDigitRange('2.0300')    // { start: 0, end: 3 }\n *     getSignificantDigitRange('0.0')       // { start: 3, end: 3 }\n *\n */\nfunction getSignificantDigitRange(value) {\n  let start = 0;\n  if (value[0] === '-') {\n    start++;\n  }\n  while (value[start] === '0' || value[start] === '.') {\n    start++;\n  }\n  let end = value.lastIndexOf('e');\n  if (end === -1) {\n    end = value.lastIndexOf('E');\n  }\n  if (end === -1) {\n    end = value.length;\n  }\n  while ((value[end - 1] === '0' || value[end - 1] === '.') && end > start) {\n    end--;\n  }\n  return {\n    start,\n    end\n  };\n}\n//# sourceMappingURL=utils.js.map","import { UnsafeNumberReason, compareNumber, countSignificantDigits, getUnsafeNumberReason, isInteger, isNumber } from './utils.js';\n\n/**\n * A lossless number. Stores its numeric value as string\n */\nexport class LosslessNumber {\n  // numeric value as string\n\n  // type information\n  isLosslessNumber = true;\n  constructor(value) {\n    if (!isNumber(value)) {\n      throw new Error(`Invalid number (value: \"${value}\")`);\n    }\n    this.value = value;\n  }\n\n  /**\n   * Get the value of the LosslessNumber as number or bigint.\n   *\n   * - a number is returned for safe numbers and decimal values that only lose some insignificant digits\n   * - a bigint is returned for big integer numbers\n   * - an Error is thrown for values that will overflow or underflow\n   *\n   * Note that you can implement your own strategy for conversion by just getting the value as string\n   * via .toString(), and using util functions like isInteger, isSafeNumber, getUnsafeNumberReason,\n   * and toSafeNumberOrThrow to convert it to a numeric value.\n   */\n  valueOf() {\n    const unsafeReason = getUnsafeNumberReason(this.value);\n\n    // safe or truncate_float\n    if (unsafeReason === undefined || unsafeReason === UnsafeNumberReason.truncate_float) {\n      return Number.parseFloat(this.value);\n    }\n\n    // truncate_integer\n    if (isInteger(this.value)) {\n      return BigInt(this.value);\n    }\n\n    // overflow or underflow\n    throw new Error(`Cannot safely convert to number: the value '${this.value}' would ${unsafeReason} and become ${Number.parseFloat(this.value)}`);\n  }\n\n  /**\n   * Get the value of the LosslessNumber as string.\n   */\n  toString() {\n    return this.value;\n  }\n\n  // Note: we do NOT implement a .toJSON() method, and you should not implement\n  // or use that, it cannot safely turn the numeric value in the string into\n  // stringified JSON since it has to be parsed into a number first.\n}\n\n/**\n * Test whether a value is a LosslessNumber\n */\nexport function isLosslessNumber(value) {\n  // @ts-ignore\n  return value && typeof value === 'object' && value.isLosslessNumber || false;\n}\n\n/**\n * Convert a number into a LosslessNumber if this is possible in a safe way\n * If the value has too many digits, or is NaN or Infinity, an error will be thrown\n */\nexport function toLosslessNumber(value) {\n  const maxDigits = 15;\n  if (countSignificantDigits(String(value)) > maxDigits) {\n    throw new Error(`Invalid number: contains more than 15 digits and is most likely truncated and unsafe by itself (value: ${value})`);\n  }\n  if (Number.isNaN(value)) {\n    throw new Error('Invalid number: NaN');\n  }\n  if (!Number.isFinite(value)) {\n    throw new Error(`Invalid number: ${value}`);\n  }\n  return new LosslessNumber(String(value));\n}\n\n/**\n * Compare two lossless numbers.\n * Returns 1 when a is larger than b, 0 when they are equal,\n * and -1 when a is smaller than b.\n */\nexport function compareLosslessNumber(a, b) {\n  return compareNumber(a.value, b.value);\n}\n//# sourceMappingURL=LosslessNumber.js.map","import { LosslessNumber } from './LosslessNumber.js';\nimport { isInteger } from './utils.js';\nexport function parseLosslessNumber(value) {\n  return new LosslessNumber(value);\n}\nexport function parseNumberAndBigInt(value) {\n  return isInteger(value) ? BigInt(value) : Number.parseFloat(value);\n}\n//# sourceMappingURL=numberParsers.js.map","import { isLosslessNumber } from './LosslessNumber.js';\n/**\n * Revive a json object.\n * Applies the reviver function recursively on all values in the JSON object.\n * @param json   A JSON Object, Array, or value\n * @param reviver\n *              A reviver function invoked with arguments `key` and `value`,\n *              which must return a replacement value. The function context\n *              (`this`) is the Object or Array that contains the currently\n *              handled value.\n */\nexport function revive(json, reviver) {\n  return reviveValue({\n    '': json\n  }, '', json, reviver);\n}\n\n/**\n * Revive a value\n */\nfunction reviveValue(context, key, value, reviver) {\n  if (Array.isArray(value)) {\n    return reviver.call(context, key, reviveArray(value, reviver));\n  }\n  if (value && typeof value === 'object' && !isLosslessNumber(value)) {\n    // note the special case for LosslessNumber,\n    // we don't want to iterate over the internals of a LosslessNumber\n    return reviver.call(context, key, reviveObject(value, reviver));\n  }\n  return reviver.call(context, key, value);\n}\n\n/**\n * Revive the properties of an object\n */\nfunction reviveObject(object, reviver) {\n  for (const key of Object.keys(object)) {\n    const value = reviveValue(object, key, object[key], reviver);\n    if (value !== undefined) {\n      object[key] = value;\n    } else {\n      delete object[key];\n    }\n  }\n  return object;\n}\n\n/**\n * Revive the properties of an Array\n */\nfunction reviveArray(array, reviver) {\n  for (let i = 0; i < array.length; i++) {\n    array[i] = reviveValue(array, String(i), array[i], reviver);\n  }\n  return array;\n}\n//# sourceMappingURL=revive.js.map","import { parseLosslessNumber } from './numberParsers.js';\nimport { revive } from './revive.js';\n/**\n * The LosslessJSON.parse() method parses a string as JSON, optionally transforming\n * the value produced by parsing.\n *\n * The parser is based on the parser of Tan Li Hou shared in\n * https://lihautan.com/json-parser-with-javascript/\n *\n * @param text\n * The string to parse as JSON. See the JSON object for a description of JSON syntax.\n *\n * @param [reviver]\n * If a function, prescribes how the value originally produced by parsing is\n * transformed, before being returned.\n *\n * @param [parseNumber=parseLosslessNumber]\n * Pass a custom number parser. Input is a string, and the output can be unknown\n * numeric value: number, bigint, LosslessNumber, or a custom BigNumber library.\n *\n * @returns Returns the Object corresponding to the given JSON text.\n *\n * @throws Throws a SyntaxError exception if the string to parse is not valid JSON.\n */\nexport function parse(text, reviver) {\n  let parseNumber = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : parseLosslessNumber;\n  let i = 0;\n  const value = parseValue();\n  expectValue(value);\n  expectEndOfInput();\n  return reviver ? revive(value, reviver) : value;\n  function parseObject() {\n    if (text.charCodeAt(i) === codeOpeningBrace) {\n      i++;\n      skipWhitespace();\n      const object = {};\n      let initial = true;\n      while (i < text.length && text.charCodeAt(i) !== codeClosingBrace) {\n        if (!initial) {\n          eatComma();\n          skipWhitespace();\n        } else {\n          initial = false;\n        }\n        const start = i;\n        const key = parseString();\n        if (key === undefined) {\n          throwObjectKeyExpected();\n          return; // To make TS happy\n        }\n        skipWhitespace();\n        eatColon();\n        const value = parseValue();\n        if (value === undefined) {\n          throwObjectValueExpected();\n          return; // To make TS happy\n        }\n\n        // TODO: test deep equal instead of strict equal\n        if (Object.prototype.hasOwnProperty.call(object, key) && !isDeepEqual(value, object[key])) {\n          // Note that we could also test `if(key in object) {...}`\n          // or `if (object[key] !== 'undefined') {...}`, but that is slower.\n          throwDuplicateKey(key, start + 1);\n        }\n        object[key] = value;\n      }\n      if (text.charCodeAt(i) !== codeClosingBrace) {\n        throwObjectKeyOrEndExpected();\n      }\n      i++;\n      return object;\n    }\n  }\n  function parseArray() {\n    if (text.charCodeAt(i) === codeOpeningBracket) {\n      i++;\n      skipWhitespace();\n      const array = [];\n      let initial = true;\n      while (i < text.length && text.charCodeAt(i) !== codeClosingBracket) {\n        if (!initial) {\n          eatComma();\n        } else {\n          initial = false;\n        }\n        const value = parseValue();\n        expectArrayItem(value);\n        array.push(value);\n      }\n      if (text.charCodeAt(i) !== codeClosingBracket) {\n        throwArrayItemOrEndExpected();\n      }\n      i++;\n      return array;\n    }\n  }\n  function parseValue() {\n    skipWhitespace();\n    const value = parseString() ?? parseNumeric() ?? parseObject() ?? parseArray() ?? parseKeyword('true', true) ?? parseKeyword('false', false) ?? parseKeyword('null', null);\n    skipWhitespace();\n    return value;\n  }\n  function parseKeyword(name, value) {\n    if (text.slice(i, i + name.length) === name) {\n      i += name.length;\n      return value;\n    }\n  }\n  function skipWhitespace() {\n    while (isWhitespace(text.charCodeAt(i))) {\n      i++;\n    }\n  }\n  function parseString() {\n    if (text.charCodeAt(i) === codeDoubleQuote) {\n      i++;\n      let result = '';\n      while (i < text.length && text.charCodeAt(i) !== codeDoubleQuote) {\n        if (text.charCodeAt(i) === codeBackslash) {\n          const char = text[i + 1];\n          const escapeChar = escapeCharacters[char];\n          if (escapeChar !== undefined) {\n            result += escapeChar;\n            i++;\n          } else if (char === 'u') {\n            if (isHex(text.charCodeAt(i + 2)) && isHex(text.charCodeAt(i + 3)) && isHex(text.charCodeAt(i + 4)) && isHex(text.charCodeAt(i + 5))) {\n              result += String.fromCharCode(Number.parseInt(text.slice(i + 2, i + 6), 16));\n              i += 5;\n            } else {\n              throwInvalidUnicodeCharacter(i);\n            }\n          } else {\n            throwInvalidEscapeCharacter(i);\n          }\n        } else {\n          if (isValidStringCharacter(text.charCodeAt(i))) {\n            result += text[i];\n          } else {\n            throwInvalidCharacter(text[i]);\n          }\n        }\n        i++;\n      }\n      expectEndOfString();\n      i++;\n      return result;\n    }\n  }\n  function parseNumeric() {\n    const start = i;\n    if (text.charCodeAt(i) === codeMinus) {\n      i++;\n      expectDigit(start);\n    }\n    if (text.charCodeAt(i) === codeZero) {\n      i++;\n    } else if (isNonZeroDigit(text.charCodeAt(i))) {\n      i++;\n      while (isDigit(text.charCodeAt(i))) {\n        i++;\n      }\n    }\n    if (text.charCodeAt(i) === codeDot) {\n      i++;\n      expectDigit(start);\n      while (isDigit(text.charCodeAt(i))) {\n        i++;\n      }\n    }\n    if (text.charCodeAt(i) === codeLowercaseE || text.charCodeAt(i) === codeUppercaseE) {\n      i++;\n      if (text.charCodeAt(i) === codeMinus || text.charCodeAt(i) === codePlus) {\n        i++;\n      }\n      expectDigit(start);\n      while (isDigit(text.charCodeAt(i))) {\n        i++;\n      }\n    }\n    if (i > start) {\n      return parseNumber(text.slice(start, i));\n    }\n  }\n  function eatComma() {\n    if (text.charCodeAt(i) !== codeComma) {\n      throw new SyntaxError(`Comma ',' expected after value ${gotAt()}`);\n    }\n    i++;\n  }\n  function eatColon() {\n    if (text.charCodeAt(i) !== codeColon) {\n      throw new SyntaxError(`Colon ':' expected after property name ${gotAt()}`);\n    }\n    i++;\n  }\n  function expectValue(value) {\n    if (value === undefined) {\n      throw new SyntaxError(`JSON value expected ${gotAt()}`);\n    }\n  }\n  function expectArrayItem(value) {\n    if (value === undefined) {\n      throw new SyntaxError(`Array item expected ${gotAt()}`);\n    }\n  }\n  function expectEndOfInput() {\n    if (i < text.length) {\n      throw new SyntaxError(`Expected end of input ${gotAt()}`);\n    }\n  }\n  function expectDigit(start) {\n    if (!isDigit(text.charCodeAt(i))) {\n      const numSoFar = text.slice(start, i);\n      throw new SyntaxError(`Invalid number '${numSoFar}', expecting a digit ${gotAt()}`);\n    }\n  }\n  function expectEndOfString() {\n    if (text.charCodeAt(i) !== codeDoubleQuote) {\n      throw new SyntaxError(`End of string '\"' expected ${gotAt()}`);\n    }\n  }\n  function throwObjectKeyExpected() {\n    throw new SyntaxError(`Quoted object key expected ${gotAt()}`);\n  }\n  function throwDuplicateKey(key, pos) {\n    throw new SyntaxError(`Duplicate key '${key}' encountered at position ${pos}`);\n  }\n  function throwObjectKeyOrEndExpected() {\n    throw new SyntaxError(`Quoted object key or end of object '}' expected ${gotAt()}`);\n  }\n  function throwArrayItemOrEndExpected() {\n    throw new SyntaxError(`Array item or end of array ']' expected ${gotAt()}`);\n  }\n  function throwInvalidCharacter(char) {\n    throw new SyntaxError(`Invalid character '${char}' ${pos()}`);\n  }\n  function throwInvalidEscapeCharacter(start) {\n    const chars = text.slice(start, start + 2);\n    throw new SyntaxError(`Invalid escape character '${chars}' ${pos()}`);\n  }\n  function throwObjectValueExpected() {\n    throw new SyntaxError(`Object value expected after ':' ${pos()}`);\n  }\n  function throwInvalidUnicodeCharacter(start) {\n    const chars = text.slice(start, start + 6);\n    throw new SyntaxError(`Invalid unicode character '${chars}' ${pos()}`);\n  }\n\n  // zero based character position\n  function pos() {\n    return `at position ${i}`;\n  }\n  function got() {\n    return i < text.length ? `but got '${text[i]}'` : 'but reached end of input';\n  }\n  function gotAt() {\n    return `${got()} ${pos()}`;\n  }\n}\nfunction isWhitespace(code) {\n  return code === codeSpace || code === codeNewline || code === codeTab || code === codeReturn;\n}\nfunction isHex(code) {\n  return code >= codeZero && code <= codeNine || code >= codeUppercaseA && code <= codeUppercaseF || code >= codeLowercaseA && code <= codeLowercaseF;\n}\nfunction isDigit(code) {\n  return code >= codeZero && code <= codeNine;\n}\nfunction isNonZeroDigit(code) {\n  return code >= codeOne && code <= codeNine;\n}\nexport function isValidStringCharacter(code) {\n  return code >= 0x20 && code <= 0x10ffff;\n}\nexport function isDeepEqual(a, b) {\n  if (a === b) {\n    return true;\n  }\n  if (Array.isArray(a) && Array.isArray(b)) {\n    return a.length === b.length && a.every((item, index) => isDeepEqual(item, b[index]));\n  }\n  if (isObject(a) && isObject(b)) {\n    const keys = [...new Set([...Object.keys(a), ...Object.keys(b)])];\n    return keys.every(key => isDeepEqual(a[key], b[key]));\n  }\n  return false;\n}\nfunction isObject(value) {\n  return typeof value === 'object' && value !== null;\n}\n\n// map with all escape characters\nconst escapeCharacters = {\n  '\"': '\"',\n  '\\\\': '\\\\',\n  '/': '/',\n  b: '\\b',\n  f: '\\f',\n  n: '\\n',\n  r: '\\r',\n  t: '\\t'\n  // note that \\u is handled separately in parseString()\n};\nconst codeBackslash = 0x5c; // \"\\\"\nconst codeOpeningBrace = 0x7b; // \"{\"\nconst codeClosingBrace = 0x7d; // \"}\"\nconst codeOpeningBracket = 0x5b; // \"[\"\nconst codeClosingBracket = 0x5d; // \"]\"\nconst codeSpace = 0x20; // \" \"\nconst codeNewline = 0xa; // \"\\n\"\nconst codeTab = 0x9; // \"\\t\"\nconst codeReturn = 0xd; // \"\\r\"\nconst codeDoubleQuote = 0x0022; // \"\nconst codePlus = 0x2b; // \"+\"\nconst codeMinus = 0x2d; // \"-\"\nconst codeZero = 0x30;\nconst codeOne = 0x31;\nconst codeNine = 0x39;\nconst codeComma = 0x2c; // \",\"\nconst codeDot = 0x2e; // \".\" (dot, period)\nconst codeColon = 0x3a; // \":\"\nexport const codeUppercaseA = 0x41; // \"A\"\nexport const codeLowercaseA = 0x61; // \"a\"\nexport const codeUppercaseE = 0x45; // \"E\"\nexport const codeLowercaseE = 0x65; // \"e\"\nexport const codeUppercaseF = 0x46; // \"F\"\nexport const codeLowercaseF = 0x66; // \"f\"\n//# sourceMappingURL=parse.js.map","/**\n * Revive a string containing an ISO 8601 date string into a JavaScript `Date` object\n */\nexport function reviveDate(key, value) {\n  return typeof value === 'string' && isoDateRegex.test(value) ? new Date(value) : value;\n}\n\n// Matches strings like \"2022-08-25T09:39:19.288Z\"\nconst isoDateRegex = /^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}\\.\\d{3}Z$/;\n//# sourceMappingURL=reviveDate.js.map","import { isNumber } from './utils.js';\n\n/**\n * The LosslessJSON.stringify() method converts a JavaScript value to a JSON string,\n * optionally replacing values if a replacer function is specified, or\n * optionally including only the specified properties if a replacer array is specified.\n *\n * @param value\n * The value to convert to a JSON string.\n *\n * @param [replacer]\n * A function that alters the behavior of the stringification process,\n * or an array of String and Number objects that serve as a whitelist for\n * selecting the properties of the value object to be included in the JSON string.\n * If this value is null or not provided, all properties of the object are\n * included in the resulting JSON string.\n *\n * @param [space]\n * A String or Number object that's used to insert white space into the output\n * JSON string for readability purposes. If this is a Number, it indicates the\n * number of space characters to use as white space; this number is capped at 10\n * if it's larger than that. Values less than 1 indicate that no space should be\n * used. If this is a String, the string (or the first 10 characters of the string,\n * if it's longer than that) is used as white space. If this parameter is not\n * provided (or is null), no white space is used.\n *\n * @param [numberStringifiers]\n * An optional list with additional number stringifiers, for example to serialize\n * a BigNumber. The output of the function must be valid stringified JSON.\n * When `undefined` is returned, the property will be deleted from the object.\n * The difference with using a `replacer` is that the output of a `replacer`\n * must be JSON and will be stringified afterwards, whereas the output of the\n * `numberStringifiers` is already stringified JSON.\n *\n * @returns Returns the string representation of the JSON object.\n */\nexport function stringify(value, replacer, space, numberStringifiers) {\n  const resolvedSpace = resolveSpace(space);\n  const replacedValue = typeof replacer === 'function' ? replacer.call({\n    '': value\n  }, '', value) : value;\n  return stringifyValue(replacedValue, '');\n\n  /**\n   * Stringify a value\n   */\n  function stringifyValue(value, indent) {\n    if (Array.isArray(numberStringifiers)) {\n      const stringifier = numberStringifiers.find(item => item.test(value));\n      if (stringifier) {\n        const str = stringifier.stringify(value);\n        if (typeof str !== 'string' || !isNumber(str)) {\n          throw new Error(`Invalid JSON number: output of a number stringifier must be a string containing a JSON number (output: ${str})`);\n        }\n        return str;\n      }\n    }\n\n    // boolean, null, number, string, or date\n    if (typeof value === 'boolean' || typeof value === 'number' || typeof value === 'string' || value === null || value instanceof Date || value instanceof Boolean || value instanceof Number || value instanceof String) {\n      return JSON.stringify(value);\n    }\n\n    // lossless number, the secret ingredient :)\n    // @ts-ignore\n    if (value?.isLosslessNumber) {\n      return value.toString();\n    }\n\n    // BigInt\n    if (typeof value === 'bigint') {\n      return value.toString();\n    }\n\n    // Array\n    if (Array.isArray(value)) {\n      return stringifyArray(value, indent);\n    }\n\n    // Object (test lastly!)\n    if (value && typeof value === 'object') {\n      return stringifyObject(value, indent);\n    }\n    return undefined;\n  }\n\n  /**\n   * Stringify an array\n   */\n  function stringifyArray(array, indent) {\n    if (array.length === 0) {\n      return '[]';\n    }\n    const childIndent = resolvedSpace ? indent + resolvedSpace : undefined;\n    let str = resolvedSpace ? '[\\n' : '[';\n    for (let i = 0; i < array.length; i++) {\n      const item = typeof replacer === 'function' ? replacer.call(array, String(i), array[i]) : array[i];\n      if (resolvedSpace) {\n        str += childIndent;\n      }\n      if (typeof item !== 'undefined' && typeof item !== 'function') {\n        str += stringifyValue(item, childIndent);\n      } else {\n        str += 'null';\n      }\n      if (i < array.length - 1) {\n        str += resolvedSpace ? ',\\n' : ',';\n      }\n    }\n    str += resolvedSpace ? `\\n${indent}]` : ']';\n    return str;\n  }\n\n  /**\n   * Stringify an object\n   */\n  function stringifyObject(object, indent) {\n    if (typeof object.toJSON === 'function') {\n      return stringify(object.toJSON(), replacer, space, undefined);\n    }\n    const keys = Array.isArray(replacer) ? replacer.map(String) : Object.keys(object);\n    if (keys.length === 0) {\n      return '{}';\n    }\n    const childIndent = resolvedSpace ? indent + resolvedSpace : undefined;\n    let first = true;\n    let str = resolvedSpace ? '{\\n' : '{';\n    for (const key of keys) {\n      const value = typeof replacer === 'function' ? replacer.call(object, key, object[key]) : object[key];\n      if (includeProperty(key, value)) {\n        if (first) {\n          first = false;\n        } else {\n          str += resolvedSpace ? ',\\n' : ',';\n        }\n        const keyStr = JSON.stringify(key);\n        str += resolvedSpace ? `${childIndent + keyStr}: ` : `${keyStr}:`;\n        str += stringifyValue(value, childIndent);\n      }\n    }\n    str += resolvedSpace ? `\\n${indent}}` : '}';\n    return str;\n  }\n\n  /**\n   * Test whether to include a property in a stringified object or not.\n   */\n  function includeProperty(_key, value) {\n    return typeof value !== 'undefined' && typeof value !== 'function' && typeof value !== 'symbol';\n  }\n}\n\n/**\n * Resolve a JSON stringify space:\n * replace a number with a string containing that number of spaces\n */\nfunction resolveSpace(space) {\n  if (typeof space === 'number') {\n    return ' '.repeat(space);\n  }\n  if (typeof space === 'string' && space !== '') {\n    return space;\n  }\n  return undefined;\n}\n//# sourceMappingURL=stringify.js.map"],"names":["g","f","exports","module","define","amd","globalThis","self","LosslessJSON","this","isInteger","value","INTEGER_REGEX","test","isNumber","NUMBER_REGEX","isSafeNumber","config","num","Number","parseFloat","parsed","String","valueDigits","extractSignificantDigits","parsedDigits","approx","requiredDigits","length","startsWith","substring","UnsafeNumberReason","getUnsafeNumberReason","truncate_integer","isFinite","underflow","truncate_float","overflow","splitNumber","match","SyntaxError","sign","digitsStr","exponent","undefined","parseInt","dot","indexOf","digits","replace","zeros","compareNumber","a","b","aa","bb","start","end","getSignificantDigitRange","lastIndexOf","LosslessNumber","isLosslessNumber","constructor","Error","valueOf","unsafeReason","BigInt","toString","parseLosslessNumber","reviveValue","context","key","reviver","Array","isArray","call","array","i","reviveArray","object","Object","keys","reviveObject","isHex","code","codeZero","codeNine","codeUppercaseA","codeUppercaseF","codeLowercaseA","codeLowercaseF","isDigit","isDeepEqual","every","item","index","isObject","Set","escapeCharacters","n","r","t","codeBackslash","codeOpeningBrace","codeClosingBrace","codeOpeningBracket","codeClosingBracket","codeSpace","codeNewline","codeTab","codeReturn","codeDoubleQuote","codePlus","codeMinus","codeOne","codeComma","codeDot","codeColon","codeUppercaseE","codeLowercaseE","isoDateRegex","compareLosslessNumber","_options","parse","text","parseNumber","arguments","parseValue","gotAt","expectValue","expectEndOfInput","json","revive","parseObject","charCodeAt","skipWhitespace","initial","eatComma","parseString","throwObjectKeyExpected","eatColon","throwObjectValueExpected","prototype","hasOwnProperty","throwDuplicateKey","throwObjectKeyOrEndExpected","parseArray","expectArrayItem","push","throwArrayItemOrEndExpected","expectDigit","slice","parseNumeric","parseKeyword","name","result","char","escapeChar","fromCharCode","throwInvalidUnicodeCharacter","throwInvalidEscapeCharacter","throwInvalidCharacter","expectEndOfString","numSoFar","pos","chars","parseNumberAndBigInt","reviveDate","Date","stringify","replacer","space","numberStringifiers","resolvedSpace","repeat","resolveSpace","stringifyValue","indent","stringifier","find","str","Boolean","JSON","childIndent","stringifyArray","toJSON","map","first","includeProperty","keyStr","stringifyObject","_key","toLosslessNumber","countSignificantDigits","isNaN","toSafeNumberOrThrow","number","unsafeReasonText"],"mappings":"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"}